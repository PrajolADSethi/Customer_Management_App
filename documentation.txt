Part 1 : Basic configuration

1. make repository on github
2. clone on PC (git clone url)
3. cd into the repository (cd name)
4. setup virtual environment [It is a recommended practise as it can help in keeping the required modules and libraries required for the particular project independent].
    command :
    (python -m venv env)
    (env\Scripts\activate)

5.  pip install required setups
6. start project
7. cd into project
8. start app (new command : python manage.py startapp appname)
9. add the app name in the settings


Part 2: views and urls
1. make a url file in the app
2. in the project url we will use the include function and include the app in the path
3. in the views : make the view functions for the required pages which you want
4. in the app url : create paths and in that call the views which you need to route

Part 3 : Template and inheritence
1. created a template folder with a sub app folder inside it containing the html files in it
2. urls already linked to the views  (create dir in the settings file)
3. create vies for template using the render function
4. created html and used template taggings extend in order to extend parent html in child html
   ---then include property for including repetaive codes like navbar in main
   ---{% block content %}{% endblock %}
   ---{% extends/include 'location of html file in the templates folder' %}
5. Used bootstrap for page stucturing and design
6. attach cdn links in the main template file inorder to inherit the css and js properties
7. row
   --col (sm md lg /-6 -8 etc)
     --div (cards )
     --div (cards)
       -- tables
8. inline css
9. its all about giving properties inside a class or id
10. other is to make separate css and js files  and link to the html files

Part 4 : Static files and images
1. create a static folder inside the local repository
--customer_Management_App
  --cma
    -- static
2. create css js and media folders
3. settings configuration: join static dir to the base ( STATICFILES_DIR[=os.path.join(BASE_DIR,'static')])
4. load the static in the required parent and included html files only as child html will inherit the property from its parent html
5. link the css js files in the html
6. include media url in settings
7. use image src and can link the image link in that

Part 5: Database models and admin panel
1. run migrate cmd
2. create superuser to access django admin
3. create models
 ---class
   ---queries functions
4. in models we are basically creating the tables and fields so that we can store the dynamic data
5. till now we saw about creating class importing models in it the creating the fields use of  null auto created fields like date then we saw a st fn which can be use to rename objects on the django admin
6. next we saw about creating the choices for which we create a tuple I guess dictionary can also be used
7. in admin import the models and in that call all the classes using (admin.site.register(Model_ClassName))

Part 6 : One to many and many to many relationships :
1. use foreignkey function inorder to import properties of a parent model class in child
2. in ForeignKey we use (on_delete = models.SET_NULL): inorder to preserve the data structure because if the parent data is deleted then their will be no sense to show the other data linked to it
3. many to many functions and one to many functions

Part 7 : Queryset
worked on several queries and properties refer the querycheatsheet.py

Part 8 : Rendering data into the templates
1. for rendering first we write the queryset in the views.py for every particular function
2. import model into views
3. call the created variables in the render fn also if their are multiple variables then make a dictionary throw all var in that and pass it in the render fn
4. now in the templates we can use template tags two types :
--- for condt / iteration  {{%  %}}
--- for parsing data from var -- {{}}

Part 9: Dynamic urls for customers
1. so here we learnt about uing primary key becoz here every customer needs to see his own page but to do that we need to make urls Dynamic
2. so use 'name/<str:pk>/' in the url
3. in the views call pk too
4. when rendering outside url you will also have to pass this id eg: {%'delete_order' item.id %}
5. basic url linking

Part 10 : CRUD operations
1. we created a form.py import form from ModelForm and form from django.forms
2. create a fn pass model form pass a subclass as meta in that call the required model and its field required for the forms
3. urls create urls for create update and delete and UD with primaryKey
4. now in views first import the form and then create three separate fns
5. create a delete template to note to use csrf_token in the forms as it is for security purpose by django before sending data in the request POST GET method
6. create fn :
   -- render
    --create context
     --then use if for returning post
       -- then check for validation of POST
        -- save is post is valid
           --redirect
7. update fn :
    -- render
     --create context
      --then use if for returning post
        -- then check for validation of POST
         -- create instance and then save for the following pk called
            --redirect
8. delete fn :
      -- render
       --create context
        --then use if for returning post
          -- then check for validation of POST
           -- delete post is valid 
              --redirect
